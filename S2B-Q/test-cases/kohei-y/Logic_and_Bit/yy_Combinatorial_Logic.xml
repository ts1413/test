<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<sm:blocks xmlns:sm="http://example.com/SimulinkModel" name="Combinatorial_Logic" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://example.com/SimulinkModel SimulinkModel.xsd">
  <file name="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.h" size="2948" timestamp="2015-09-29T10:40:15+0900" type="c-header"/>
  <file name="xx_Combinatorial_Logic.xml" size="1441" timestamp="2015-10-07T15:40:37+0900" type="xml"/>
  <file name="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.c" size="2087" timestamp="2015-09-29T10:40:15+0900" type="c-source"/>
  <block blocktype="Inport" id="1" name="Combinatorial_Logic_In1" priority="0" rate="0.1">
    <output line="Combinatorial_Logic_In1_1" port="Combinatorial_Logic_In1_1" usename="true">
      <connect block="Combinatorial_Logic_CombinatorialLogic" port="Combinatorial_Logic_CombinatorialLogic_1"/>
    </output>
    <var line="Combinatorial_Logic_In1_1" mode="extin" name="Combinatorial_Logic_In1_1" port="Combinatorial_Logic_In1_1" size="3" type="boolean_T"/>
    <forward block="Combinatorial_Logic_CombinatorialLogic" type="port">
      <var line="Combinatorial_Logic_In1_1" mode="input" name="Combinatorial_Logic_In1_1" port="Combinatorial_Logic_CombinatorialLogic_1" size="3" type="boolean_T"/>
    </forward>
  </block>
  <block blocktype="CombinatorialLogic" id="2" name="Combinatorial_Logic_CombinatorialLogic" priority="1" rate="0.1">
    <input line="Combinatorial_Logic_In1_1" port="Combinatorial_Logic_CombinatorialLogic_1">
      <connect block="Combinatorial_Logic_In1" port="Combinatorial_Logic_In1_1"/>
    </input>
    <output line="Combinatorial_Logic_CombinatorialLogic_1" port="Combinatorial_Logic_CombinatorialLogic_1" usename="true">
      <connect block="Combinatorial_Logic_Out1" port="Combinatorial_Logic_Out1_1"/>
    </output>
    <var line="Combinatorial_Logic_In1_1" mode="input" name="Combinatorial_Logic_In1_1" port="Combinatorial_Logic_CombinatorialLogic_1" size="3" type="boolean_T"/>
    <var line="Combinatorial_Logic_CombinatorialLogic_1" mode="extout" name="Combinatorial_Logic_CombinatorialLogic_1" port="Combinatorial_Logic_CombinatorialLogic_1" size="2" type="boolean_T"/>
    <param name="CombinatorialLogic_table" size="16" storage="Combinatorial_Logic_P" type="boolean_T"/>
    <code file="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.c" line="33" type="task">  /* CombinatorialLogic: '&lt;Root&gt;/CombinatorialLogic' incorporates:
   *  Inport: '&lt;Root&gt;/In1'
   */
  rowIdx = Combinatorial_Logic_In1_1[0U];
  rowIdx = (int32_T)(((uint32_T)rowIdx &lt;&lt; 1) + Combinatorial_Logic_In1_1[1U]);
  rowIdx = (int32_T)(((uint32_T)rowIdx &lt;&lt; 1) + Combinatorial_Logic_In1_1[2U]);
  Combinatorial_Logic_CombinatorialLogic_1[0U] =
    Combinatorial_Logic_P.CombinatorialLogic_table[(uint32_T)rowIdx];
  Combinatorial_Logic_CombinatorialLogic_1[1U] =
    Combinatorial_Logic_P.CombinatorialLogic_table[rowIdx + 8U];
</code>
    <code file="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.c" line="56" type="init">  Combinatorial_Logic_CombinatorialLogic_1[0] = false;
  Combinatorial_Logic_CombinatorialLogic_1[1] = false;

</code>
    <forward block="Combinatorial_Logic_Out1" type="port">
      <var line="Combinatorial_Logic_CombinatorialLogic_1" mode="input" name="Combinatorial_Logic_CombinatorialLogic_1" port="Combinatorial_Logic_Out1_1" size="2" type="boolean_T"/>
    </forward>
    <backword block="Combinatorial_Logic_In1" type="port">
      <var line="Combinatorial_Logic_In1_1" mode="extin" name="Combinatorial_Logic_In1_1" port="Combinatorial_Logic_In1_1" size="3" type="boolean_T"/>
    </backword>
  </block>
  <block blocktype="Outport" id="3" name="Combinatorial_Logic_Out1" priority="2" rate="0.1">
    <input line="Combinatorial_Logic_CombinatorialLogic_1" port="Combinatorial_Logic_Out1_1">
      <connect block="Combinatorial_Logic_CombinatorialLogic" port="Combinatorial_Logic_CombinatorialLogic_1"/>
    </input>
    <var line="Combinatorial_Logic_CombinatorialLogic_1" mode="input" name="Combinatorial_Logic_CombinatorialLogic_1" port="Combinatorial_Logic_Out1_1" size="2" type="boolean_T"/>
    <backword block="Combinatorial_Logic_CombinatorialLogic" type="port">
      <var line="Combinatorial_Logic_CombinatorialLogic_1" mode="extout" name="Combinatorial_Logic_CombinatorialLogic_1" port="Combinatorial_Logic_CombinatorialLogic_1" size="2" type="boolean_T"/>
    </backword>
  </block>
  <code type="rt-macro">/* Macros for accessing real-time model data structure */
#ifndef rtmGetErrorStatus
# define rtmGetErrorStatus(rtm)        ((rtm)-&gt;errorStatus)
#endif

#ifndef rtmSetErrorStatus
# define rtmSetErrorStatus(rtm, val)   ((rtm)-&gt;errorStatus = (val))
#endif

</code>
  <code type="rt-type">/* Real-time Model Data Structure */
struct tag_RTM_Combinatorial_Logic_T {
  const char_T * volatile errorStatus;
};
</code>
  <code type="autovars">  int32_T rowIdx;

</code>
  <object kind="rtm-extern" name="Combinatorial_Logic_M" type="extern RT_MODEL_Combinatorial_Logic_T * const"/>
  <object kind="rtm-object" name="Combinatorial_Logic_M_" type="RT_MODEL_Combinatorial_Logic_T"/>
  <object kind="rtm-pointer" name="Combinatorial_Logic_M" type="RT_MODEL_Combinatorial_Logic_T * const" value="&amp;Combinatorial_Logic_M_"/>
  <includes file="&lt;stddef.h>" from="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.h" index="0"/>
  <includes file="&lt;string.h>" from="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.h" index="1"/>
  <includes file="&quot;rtwtypes.h&quot;" from="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.h" index="2"/>
  <includes file="&quot;Combinatorial_Logic_types.h&quot;" from="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.h" index="3"/>
  <includes file="&quot;Combinatorial_Logic_private.h&quot;" from="Combinatorial_Logic_ert_rtw/Combinatorial_Logic.c" index="4"/>
</sm:blocks>

<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<sm:blocks xmlns:sm="http://example.com/SimulinkModel" name="LookupTable1D5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://example.com/SimulinkModel SimulinkModel.xsd">
  <file name="LookupTable1D5_ert_rtw/LookupTable1D5.h" size="3046" timestamp="2015-10-05T16:56:55+0900" type="c-header"/>
  <file name="xx_LookupTable1D5.xml" size="1297" timestamp="2015-10-07T15:40:44+0900" type="xml"/>
  <file name="LookupTable1D5_ert_rtw/LookupTable1D5.c" size="3092" timestamp="2015-10-05T16:56:55+0900" type="c-source"/>
  <block blocktype="Inport" id="1" name="LookupTable1D5_In1" priority="0" rate="0.1">
    <output line="LookupTable1D5_In1_1" port="LookupTable1D5_In1_1" usename="true">
      <connect block="LookupTable1D5_1_DLookupTable" port="LookupTable1D5_1_DLookupTable_1"/>
    </output>
    <var line="LookupTable1D5_In1_1" mode="extin" name="LookupTable1D5_In1_1" port="LookupTable1D5_In1_1" type="real_T"/>
    <code file="LookupTable1D5_ert_rtw/LookupTable1D5.c" line="100" type="init">  LookupTable1D5_In1_1 = 0.0;
</code>
    <forward block="LookupTable1D5_1_DLookupTable" type="port">
      <var line="LookupTable1D5_In1_1" mode="input" name="LookupTable1D5_In1_1" port="LookupTable1D5_1_DLookupTable_1" type="real_T"/>
    </forward>
  </block>
  <block blocktype="Lookup_n-D" id="2" name="LookupTable1D5_1_DLookupTable" priority="1" rate="0.1">
    <input line="LookupTable1D5_In1_1" port="LookupTable1D5_1_DLookupTable_1">
      <connect block="LookupTable1D5_In1" port="LookupTable1D5_In1_1"/>
    </input>
    <output line="LookupTable1D5_1_DLookupTable_1" port="LookupTable1D5_1_DLookupTable_1" usename="true">
      <connect block="LookupTable1D5_Out1" port="LookupTable1D5_Out1_1"/>
    </output>
    <var line="LookupTable1D5_In1_1" mode="input" name="LookupTable1D5_In1_1" port="LookupTable1D5_1_DLookupTable_1" type="real_T"/>
    <var line="LookupTable1D5_1_DLookupTable_1" mode="extout" name="LookupTable1D5_1_DLookupTable_1" port="LookupTable1D5_1_DLookupTable_1" type="real_T"/>
    <param name="_DLookupTable_tableData" size="11" storage="LookupTable1D5_P" type="real_T"/>
    <param name="_DLookupTable_bp01Data" size="11" storage="LookupTable1D5_P" type="real_T"/>
    <code file="LookupTable1D5_ert_rtw/LookupTable1D5.c" line="78" type="task">  /* Lookup_n-D: '&lt;Root&gt;/1_DLookupTable' incorporates:
   *  Inport: '&lt;Root&gt;/In1'
   */
  LookupTable1D5_1_DLookupTable_1 = look1_linlxpw(LookupTable1D5_In1_1,
    LookupTable1D5_P._DLookupTable_bp01Data,
    LookupTable1D5_P._DLookupTable_tableData, 10U);
</code>
    <code file="LookupTable1D5_ert_rtw/LookupTable1D5.c" line="97" type="init">  LookupTable1D5_1_DLookupTable_1 = 0.0;

</code>
    <forward block="LookupTable1D5_Out1" type="port">
      <var line="LookupTable1D5_1_DLookupTable_1" mode="input" name="LookupTable1D5_1_DLookupTable_1" port="LookupTable1D5_Out1_1" type="real_T"/>
    </forward>
    <backword block="LookupTable1D5_In1" type="port">
      <var line="LookupTable1D5_In1_1" mode="extin" name="LookupTable1D5_In1_1" port="LookupTable1D5_In1_1" type="real_T"/>
    </backword>
  </block>
  <block blocktype="Outport" id="3" name="LookupTable1D5_Out1" priority="2" rate="0.1">
    <input line="LookupTable1D5_1_DLookupTable_1" port="LookupTable1D5_Out1_1">
      <connect block="LookupTable1D5_1_DLookupTable" port="LookupTable1D5_1_DLookupTable_1"/>
    </input>
    <var line="LookupTable1D5_1_DLookupTable_1" mode="input" name="LookupTable1D5_1_DLookupTable_1" port="LookupTable1D5_Out1_1" type="real_T"/>
    <backword block="LookupTable1D5_1_DLookupTable" type="port">
      <var line="LookupTable1D5_1_DLookupTable_1" mode="extout" name="LookupTable1D5_1_DLookupTable_1" port="LookupTable1D5_1_DLookupTable_1" type="real_T"/>
    </backword>
  </block>
  <code type="rt-macro">/* Macros for accessing real-time model data structure */
#ifndef rtmGetErrorStatus
# define rtmGetErrorStatus(rtm)        ((rtm)-&gt;errorStatus)
#endif

#ifndef rtmSetErrorStatus
# define rtmSetErrorStatus(rtm, val)   ((rtm)-&gt;errorStatus = (val))
#endif

</code>
  <code type="rt-type">/* Real-time Model Data Structure */
struct tag_RTM_LookupTable1D5_T {
  const char_T * volatile errorStatus;
};
</code>
  <object kind="rtm-extern" name="LookupTable1D5_M" type="extern RT_MODEL_LookupTable1D5_T * const"/>
  <object kind="rtm-object" name="LookupTable1D5_M_" type="RT_MODEL_LookupTable1D5_T"/>
  <object kind="rtm-pointer" name="LookupTable1D5_M" type="RT_MODEL_LookupTable1D5_T * const" value="&amp;LookupTable1D5_M_"/>
  <includes file="&lt;stddef.h>" from="LookupTable1D5_ert_rtw/LookupTable1D5.h" index="0"/>
  <includes file="&quot;rtwtypes.h&quot;" from="LookupTable1D5_ert_rtw/LookupTable1D5.h" index="1"/>
  <includes file="&quot;LookupTable1D5_types.h&quot;" from="LookupTable1D5_ert_rtw/LookupTable1D5.h" index="2"/>
  <includes file="&quot;LookupTable1D5_private.h&quot;" from="LookupTable1D5_ert_rtw/LookupTable1D5.c" index="3"/>
  <function name="look1_linlxpw" type="defn">
    <code line="28" type="func">real_T look1_linlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
  real_T frac;
  uint32_T bpIdx;

  /* Lookup 1-D
     Search method: 'linear'
     Use previous index: 'off'
     Interpolation method: 'Linear'
     Extrapolation method: 'Linear'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  /* Prelookup - Index and Fraction
     Index Search method: 'linear'
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 &lt;= bp0[0U]) {
    bpIdx = 0U;
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
  } else if (u0 &lt; bp0[maxIndex]) {
    /* Linear Search */
    for (bpIdx = maxIndex &gt;&gt; 1U; u0 &lt; bp0[bpIdx]; bpIdx--) {
    }

    while (u0 &gt;= bp0[bpIdx + 1U]) {
      bpIdx++;
    }

    frac = (u0 - bp0[bpIdx]) / (bp0[bpIdx + 1U] - bp0[bpIdx]);
  } else {
    bpIdx = maxIndex - 1U;
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
  }

  /* Interpolation 1-D
     Interpolation method: 'Linear'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[bpIdx + 1U] - table[bpIdx]) * frac + table[bpIdx];
}
</code>
  </function>
</sm:blocks>
